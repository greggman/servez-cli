#!/usr/bin/env node

"use strict";

const makeOptions = require('optionator');
const colorSupport = require('color-support') || {};
const c = require('ansi-colors');
c.enabled = colorSupport.hasBasic;

const log = {
  info(...args) {
    console.log(...args);
  },
  warn(...args) {
    console.warn(c.yellow([...args].join(' ')));
  },
  error(...args) {
    console.error(c.red([args].join(' ')));
  },
};

const optionSpec = {
  options: [
    { option: 'help', alias: 'h', type: 'Boolean',  description: 'displays help' },
    { option: 'port', alias: 'p', type: 'Int',      description: 'port', default: '8080' },
    { option: 'version',          type: 'Boolean',  description: 'print version' },
    { option: 'scan',             type: 'Boolean',  description: 'scan for open port', default: 'true', },
    { option: 'dirs',             type: 'Boolean',  description: 'show directory listing', default: 'true', },
    { option: 'cors',             type: 'Boolean',  description: 'send CORS headers', default: 'true', },
    { option: 'local',            type: 'Boolean',  description: 'local machine only', default: 'false', },
    { option: 'index',            type: 'Boolean',  description: 'serve index.html for directories', default: 'true', },
    { option: 'extensions',       type: '[String]', description: 'extensions to try if path does not exist', default: '["html"]', },
    { option: 'gzip',             type: 'Boolean',  description: 'serve .gz files if they exist', default: 'false', },
    { option: 'brotli',           type: 'Boolean',  description: 'serve .br files if they exist', default: 'false', },
    { option: 'robots',           type: 'Boolean',  description: 'serve a robots.txt if one does not exist', default: 'true', },
    { option: 'hidden',           type: 'Boolean',  description: 'show hidden dotfiles', default: 'false', },
    { option: 'username',         type: 'String',   description: 'username for basic auth' },
    { option: 'password',         type: 'String',   description: 'password for basic auth' },
    { option: 'ssl',  alias: 'S', type: 'Boolean',  description: 'enable https (will use fake cert if not specified)', },
    { option: 'cert', alias: 'C', type: 'String',   description: 'Path to ssl cert file', },
    { option: 'key',  alias: 'K', type: 'String',   description: 'Path to ssl key file', },
  ],
  prepend: `Usage: servez [options] [path-to-serve]`,
  helpStyle: {
    typeSeparator: '=',
    descriptionSeparator: ' : ',
    initialIndent: 4,
  },
};
/* eslint-enable object-curly-newline */
const optionator = makeOptions(optionSpec);

let args;
try {
  args = optionator.parse(process.argv);
} catch (e) {
  log.error(e);
  printHelp();
}

function printHelp() {
  log.info(optionator.generateHelp());
  process.exit(1);  // eslint-disable-line
}

if (args.help) {
  printHelp();
}

if (args.version) {
  const pkg = require('../package.json');
  log.info(pkg.version);
  process.exit(0);
}

const fs = require('fs');
const path = require('path');

const root = path.resolve(args._[0] || process.cwd());
try {
  const stat = fs.statSync(root);
  if (!stat.isDirectory()) {
    log.error(`'${root}' is not a directory`);
    process.exit(1);  // eslint-disable-line
  }
} catch (e) {
  if (e.code === 'ENOENT') {
    log.warn(c.bold.yellow(`!!!!!!!!!!!!!!!\n\n WARNING: '${root}' does not exist!\n\n!!!!!!!!!!!!!!!`));
  } else {
    log.error(e, e.stack);
    process.exit(1);  // eslint-disable-line
  }
}

process.stdin.destroy(); // this allows control-c to not print "Terminate Batch?"
process.title = `servez ${root.split(/\\|\//g).slice(-3).join(path.sep)}`;

const commands = {
  log(data) {
    console.log(...data);
  },
  error(data) {
    console.error(c.red([...data].join(' ')));
  },
};

const {Worker} = require('worker_threads');
const worker = new Worker(path.join(__dirname, '..', 'src', 'server-worker.js'), {
  workerData: {
    root,
    args,
    useColors: colorSupport.hasBasic,
  },
});
worker.on('message', (msg) => {
  const cmd = msg.cmd;
  const fn = commands[cmd];
  if (!fn) {
    throw new Error(`unknown cmd: ${cmd}`);
  }
  fn(msg.data);
});

process.on('SIGINT', function () {
  console.log(c.red('servez stopped.'));
  process.exit(0);
});

