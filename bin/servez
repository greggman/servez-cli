#!/usr/bin/env node

"use strict";

const { program } = require('commander');
const pkg = require('../package.json');
const colorSupport = require('color-support') || {};
const c = require('ansi-colors');
c.enabled = colorSupport.hasBasic;

const log = {
  info(...args) {
    console.log(...args);
  },
  warn(...args) {
    console.warn(c.yellow([...args].join(' ')));
  },
  error(...args) {
    console.error(c.red([args].join(' ')));
  },
};

const fixedParseInt = v => parseInt(v);
const parseHeader = (v, oldV) => {
  console.log('v:', `'${v}'`);
  console.log('oldV:', `'${JSON.stringify(oldV)}'`);
  const m = /^(.*?):(.*?)$/.exec(v);
  if (!m) {
    throw new Error('bad header argument: format is --header=<header>:<value>');
  }
  const newV = {...oldV};
  newV[m[1]] = m[2];
  return newV;
};

program
    .name('servez')
    .version(pkg.version)
    .usage('[options] [path-to-serve]')
    .argument('[path-to-serve]', 'path to serve')
    .option('-p, --port <port>',           'port', fixedParseInt, 8080)
    .option('--no-scan',                   'do not scan for open port')
    .option('--qr',                        'print QR Code for root url')
    .option('--no-dirs',                   'do not show directory listing')
    .option('--no-cors',                   'do not send CORS headers')
    .option('--local',                     'local machine only')
    .option('--no-index',                  'do not serve index.html for directories')
    .option('--extensions <extensions...>','extensions to try if path does not exist', ['html'])
    .option('--no-unity-hack',             'do not ignore .gz and .br when computing content type')
    .option('--shared-array-buffers',      "include headers 'Cross-Origin-Opener-Policy': 'same-origin' and 'Cross-Origin-Embedder-Policy': 'require-corp'", false)
    .option('--header <header>',           'extra headers to include eg --header=Content-Language:de-DE', parseHeader, {})
    .option('--gzip',                      'serve .gz files if they exist', false)
    .option('--brotli',                    'serve .br files if they exist', false)
    .option('--no-robots',                 'do not serve a robots.txt if one does not exist', true)
    .option('--hidden',                    'show hidden dotfiles', false)
    .option('--username <username>',       'username for basic auth')
    .option('--password <password>',       'password for basic auth')
    .option('-S, --ssl',                   'enable https (will use fake cert if not specified)', false)
    .option('-C, --cert <cert>',           'Path to ssl cert file')
    .option('-K, --key <key>',             'Path to ssl key file')
    .action(main);

program.showHelpAfterError('(add --help for additional information)');
program.parse();

function main(pathToServe, args) {
  args.headers = args.header;
  delete args.header;

  const fs = require('fs');
  const path = require('path');
  const {QrCode, Ecc} = require('../lib/qrcodegen');
  const hosts = [];

  function genQRCode(s) {
    const qr = QrCode.encodeText(s, Ecc.MEDIUM);
    const size = qr.size + 2;

    const lines = [];
    for (let y = -2; y < size; ++y) {
      const line = [];
      for (let x = -2; x < size; ++x) {
        line.push(c[qr.getModule(x, y) ? 'bgBlack' : 'bgWhite']('  '));
      }
      lines.push(line.join(''));
    }
    return lines.join('\n');
  }

  const root = path.resolve(pathToServe || process.cwd());
  try {
    const stat = fs.statSync(root);
    if (!stat.isDirectory()) {
      log.error(`'${root}' is not a directory`);
      process.exit(1);  // eslint-disable-line
    }
  } catch (e) {
    if (e.code === 'ENOENT') {
      log.warn(c.bold.yellow(`!!!!!!!!!!!!!!!\n\n WARNING: '${root}' does not exist!\n\n!!!!!!!!!!!!!!!`));
    } else {
      log.error(e, e.stack);
      process.exit(1);  // eslint-disable-line
    }
  }

  process.stdin.destroy(); // this allows control-c to not print "Terminate Batch?"
  process.title = `servez ${root.split(/\\|\//g).slice(-3).join(path.sep)}`;

  const commands = {
    log(args) {
      console.log(...args);
    },
    error(args) {
      console.error(c.red(args.join(' ')));
    },
    host(args) {
      const localRE = /\D0\.0\.0\.0.\D|\D127\.0\.0\.|\Wlocalhost\W/
      const [data] = args;
      const {root} = data;
      if (!localRE.test(root)) {
        hosts.push(root);
      }
    },
    start(data) {
      if (args.qr) {
        for (const host of hosts) {
          log.info(`--------------\nQR code for: ${host}`);
          log.info(genQRCode(host));
          log.info('');
        }
      }
      log.info('press CTRL-C to stop the server.');
    },
  };

  const {Worker} = require('worker_threads');
  const worker = new Worker(path.join(__dirname, '..', 'src', 'server-worker.js'), {
    workerData: {
      root,
      args,
      useColors: colorSupport.hasBasic,
    },
  });
  worker.on('message', (msg) => {
    const cmd = msg.cmd;
    const fn = commands[cmd];
    if (!fn) {
      throw new Error(`unknown cmd: ${cmd}`);
    }
    fn(msg.data);
  });

  process.on('SIGINT', function () {
    console.log(c.red('servez stopped.'));
    process.exit(0);
  });
}
